@page "/debts"
@using TrackerBuddy.Models
@inject UserService UserService

<h1>Debt Management</h1>

<div class="debt-summary">
    <div class="card">
        <h4>Total Debt</h4>
        <p>$@TotalDebt</p>
        <small>Across @TotalDebts debts</small>
    </div>
    <div class="card">
        <h4>Pending Amount</h4>
        <p>$@PendingDebt</p>
        <small>Due within 30 days</small>
    </div>
    <div class="card">
        <h4>Cleared Debt</h4>
        <p>$@ClearedDebt</p>
        <small>Last payment: @LastPaymentDate</small>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Source</th>
            <th>Amount</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var debt in Data.Debts.OrderBy(d => d.DueDate))
        {
            <tr>
                <td>@debt.Source</td>
                <td>$@debt.Amount</td>
                <td>@debt.DueDate.ToString("MM/dd/yyyy")</td>
                <td>@debt.Status</td>
                <td>
                    <button class="btn btn-sm btn-warning" @onclick="() => EditDebt(debt.Id)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteDebt(debt.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (IsEditing)
{
    <h2>Edit Debt</h2>
    <EditForm Model="editingDebt" OnValidSubmit="HandleEditSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="source">Source</label>
            <InputText id="source" @bind-Value="editingDebt.Source" class="form-control" />
        </div>

        <div class="form-group">
            <label for="amount">Debt Amount</label>
            <InputNumber id="amount" @bind-Value="editingDebt.Amount" class="form-control" />
        </div>

        <div class="form-group">
            <label for="dueDate">Due Date</label>
            <InputDate id="dueDate" @bind-Value="editingDebt.DueDate" class="form-control" />
        </div>

        <div class="form-group">
            <label for="status">Status</label>
            <select id="status" @bind="editingDebt.Status" class="form-control">
                <option value="Pending">Pending</option>
                <option value="Cleared">Cleared</option>
            </select>
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
    </EditForm>
}

<h2>Add New Debt</h2>
<EditForm Model="newDebt" OnValidSubmit="HandleDebtSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="source">Source</label>
        <InputText id="source" @bind-Value="newDebt.Source" class="form-control" />
    </div>

    <div class="form-group">
        <label for="amount">Debt Amount</label>
        <InputNumber id="amount" @bind-Value="newDebt.Amount" class="form-control" />
    </div>

    <div class="form-group">
        <label for="dueDate">Due Date</label>
        <InputDate id="dueDate" @bind-Value="newDebt.DueDate" class="form-control" />
    </div>

    <div class="form-group">
        <label for="status">Status</label>
        <select id="status" @bind="newDebt.Status" class="form-control">
            <option value="Pending">Pending</option>
            <option value="Cleared">Cleared</option>
        </select>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Add Debt</button>
    </div>
</EditForm>

@code {
    private AppData Data = new AppData();
    private Debt newDebt = new Debt { Status = "Pending" }; // Set default status to "Pending"
    private Debt editingDebt = new Debt();
    private bool IsEditing = false;

    private decimal TotalDebt = 0;
    private int TotalDebts;
    private decimal PendingDebt;
    private decimal ClearedDebt;
    private string LastPaymentDate = "N/A";

    protected override void OnInitialized()
    {
        Data = UserService.LoadUsers();
        CalculateDebtSummary();
    }

    private void CalculateDebtSummary()
    {
        TotalDebt = Data.Debts.Sum(d => d.Amount);
        TotalDebts = Data.Debts.Count;
        PendingDebt = Data.Debts.Where(d => d.Status == "Pending").Sum(d => d.Amount);
        ClearedDebt = Data.Debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
        LastPaymentDate = Data.Debts.Where(d => d.Status == "Cleared")
                                    .OrderByDescending(d => d.DueDate)
                                    .FirstOrDefault()?.DueDate.ToString("MM/dd/yyyy") ?? "N/A";
    }

    private void HandleDebtSubmit()
    {
        newDebt.Id = Data.Debts.Count + 1;
        Data.Debts.Add(newDebt);
        UserService.SaveUsers(Data);

        // Recalculate summary
        CalculateDebtSummary();

        // Reset form with default status "Pending"
        newDebt = new Debt { Status = "Pending" };
    }

    private void DeleteDebt(int debtId)
    {
        var debtToRemove = Data.Debts.FirstOrDefault(d => d.Id == debtId);
        if (debtToRemove != null)
        {
            Data.Debts.Remove(debtToRemove);
            UserService.SaveUsers(Data);

            // Recalculate summary
            CalculateDebtSummary();
        }
    }

    private void EditDebt(int debtId)
    {
        editingDebt = Data.Debts.FirstOrDefault(d => d.Id == debtId);
        if (editingDebt != null)
        {
            IsEditing = true;
        }
    }

    private void HandleEditSubmit()
    {
        var existingDebt = Data.Debts.FirstOrDefault(d => d.Id == editingDebt.Id);
        if (existingDebt != null)
        {
            existingDebt.Source = editingDebt.Source;
            existingDebt.Amount = editingDebt.Amount;
            existingDebt.DueDate = editingDebt.DueDate;
            existingDebt.Status = editingDebt.Status;

            UserService.SaveUsers(Data);

            // Recalculate summary
            CalculateDebtSummary();

            // Reset editing state
            editingDebt = new Debt();
            IsEditing = false;
        }
    }
}
